<?php
	require_once(dirname(__FILE__)."/../generic_module.php");
	require_once(dirname(__FILE__)."/../../../lib/FSS/modules/Network.FS.class.php");
	
	/**
	* TODO : objectize those scripts
	*/
	
	class iDHCPConfig extends genModule{
		function iDHCPConfig($iMgr) { parent::genModule($iMgr); }

		public function Load() {
			$output = "";
			if($do = FS::$secMgr->checkGetData("do")) {
				switch($do) {
					case 1: $output .= $this->showSubnetForm(); break;
					case 2: $output .= $this->showSubnetForm(true); break;
					case 3: $output .= $this->showFailover(); break;
					case 4: $output .= $this->showFailover(true); break;
					case 5: $output .= $this->showPool(); break;
					case 6: $output .= $this->showPool(true); break;
					case 7: $output .= $this->showReserv(); break;
					default: $output .= $this->showMain(); break;
				}
			}
			else
				$output .= $this->showMain();
			return $output;
		}
		
		private function writeFailover($id) {
			FS::$fileMgr->setPath("/etc/dhcp/dhcpd-failover-".$id.".conf");
			FS::$fileMgr->setOpeningMode("w+");
			if(!FS::$fileMgr->open()) 
				return false;
			
			$query = FS::$dbMgr->Select("fss_dhcp_failover","name,`primary`,s_addr,s_port,d_addr,d_port,`resp-delay`,`max-unack`,`max-balance`,mclt,split","id = '".$id."'");
			if($data = mysql_fetch_array($query)) {
				FS::$fileMgr->writeLine("failover peer \"".$data["name"]."\" {");
				FS::$fileMgr->writeLine($data["primary"] == 1 ? "primary;" : "secondary;");
				FS::$fileMgr->writeLine("address ".$data["s_addr"].";");
				FS::$fileMgr->writeLine("port ".$data["s_port"].";");
				FS::$fileMgr->writeLine("peer address ".$data["d_addr"].";");
				FS::$fileMgr->writeLine("peer port ".$data["d_port"].";");
				FS::$fileMgr->writeLine("max-response-delay ".$data["resp-delay"].";");
				FS::$fileMgr->writeLine("max-unacked-updates ".$data["max-unack"].";");
				FS::$fileMgr->writeLine("load balance max seconds ".$data["max-balance"].";");
				if($data["primary"] == 1) {
					FS::$fileMgr->writeLine("mclt ".$data["mclt"].";");
					FS::$fileMgr->writeLine("split ".(round($data["split"] * 255 / 100)).";");
				}
				FS::$fileMgr->writeLine("}");
			}
			
			FS::$fileMgr->close();
			return true;
		}
		
		private function writeSubnet($id) {
			FS::$fileMgr->setPath("/etc/dhcp/dhcpd-subnet-".$id.".conf");
			FS::$fileMgr->setOpeningMode("w+");
			if(!FS::$fileMgr->open())
				return false;
			
			$query = FS::$dbMgr->Select("fss_dhcp_subnet","net_addr,netmask,domain,dns1,dns2,dnsupdate,maxlease,suglease,tftp,pxe,router,pxegw,failover_id,unkcli","id = '".$id."'");
			$data = mysql_fetch_array($query);
			if(!$data)
				return false;
			
			FS::$fileMgr->writeLine("# Auto-generated by FSS-DHCP-FRONTEND");
			FS::$fileMgr->writeLine("");
			
			FS::$fileMgr->writeLine("subnet ".$data["net_addr"]." netmask ".$data["netmask"]." {");
			
			if(strlen($data["domain"]) > 0)
				FS::$fileMgr->writeLine("    option domain-name \"".$data["domain"]."\";");			
				
			FS::$fileMgr->writeLine("    option domain-name-servers ".$data["dns1"].(strlen($data["dns2"]) > 0 ? ", ".$data["dns2"] : "").";");
			FS::$fileMgr->writeLine("");
			
			if($data["dnsupdate"] == 1) {
				FS::$fileMgr->writeLine("    # DNS updating options");
				FS::$fileMgr->writeLine("    ddns-updates on;");
				FS::$fileMgr->writeLine("    ddns-update-style interim;");
				
				if(strlen($data["domain"]) > 0)
					FS::$fileMgr->writeLine("    ddns-domainname \"".$data["domain"].".\";");
					
				FS::$fileMgr->writeLine("    ddns-rev-domainname \"in-addr.arpa.\";");
			}
			else
				FS::$fileMgr->writeLine("    ddns-update-style none;");
				
			FS::$fileMgr->writeLine("");
			
			FS::$fileMgr->writeLine("    option routers ".$data["router"].";");
			FS::$fileMgr->writeLine("    default-lease-time ".$data["suglease"].";");
			FS::$fileMgr->writeLine("    max-lease-time ".$data["maxlease"].";");
			if($data["unkcli"] == 0)
				FS::$fileMgr->writeLine("    deny unknown-clients;");
			
			if(strlen($data["pxe"]) > 0) {
				FS::$fileMgr->writeLine("");
				FS::$fileMgr->writeLine("    # for PXE only");
				FS::$fileMgr->writeLine("    allow bootp;");
				FS::$fileMgr->writeLine("    allow booting;");
				FS::$fileMgr->writeLine("    class \"pxeclients\" {");
				FS::$fileMgr->writeLine("        match if substring (option vendor-class-identifier, 0, 9) = \"PXEClient\";");
				if(strlen($data["pxegw"]))
					FS::$fileMgr->writeLine("        option routers ".$data["pxegw"].";");
				FS::$fileMgr->writeLine("        option PXE.mtftp-ip ".$data["tftp"].";");
				FS::$fileMgr->writeLine("        next-server ".$data["pxe"].";");
				FS::$fileMgr->writeLine("    }");
			}
			
			# pool only if range exists
			$pool = false;
			$query2 = FS::$dbMgr->Select("fss_dhcp_ranges","start,end","subnet = '".$id."'");
			$netMgr = new FSNetword();
			while($data2 = mysql_fetch_array($query2)) {
				if(!$pool) {
					FS::$fileMgr->writeLine("    pool {");
					$pool = true;
				}
				
				// Set all distributed IPs in an array to false value
				$rangeIPs = array();
				for($i=ip2long($data2["start"]);$i<=ip2long($data2["end"]);$i++)
					$rangeIP[long2ip($i)] = false;	

				// Set true for each reserved IP
				$query2 = FS::$dbMgr->Select("fss_dhcp_host","addr");
				while($data3 = mysql_fetch_array($query2)) {
					if($network->isUsableIP($data3["addr"]) && ip2long($data3["addr"]) >= ip2long($data2["start"]) && ip2long($data3["addr"]) <= ip2long($data2["end"]))
						$rangeIP[$data3["addr"]] = true;
				}
				
				// generate ranges
				$cur_start = "";
				$cur_end = "";
				for($i=ip2long($data2["start"]);$i<=ip2long($data2["end"]);$i++) {
					// if ip can be distributed
					if($rangeIP[long2ip($i)] == false) {
						// if no start, this is start
						if($cur_start == "") $cur_start = $rangeIP[long2ip($i)];
						
						// if no end, this is end, else if this is > current end, end is this.
						if($cur_end == "") 
							$cur_end = $rangeIP[long2ip($i)];
						else if(ip2long($cur_end) > $i) 
							$cur_end = long2ip($i);
					} else {
						// if cannot be distributed, we create the last registered range and set current values to nothing
						FS::$fileMgr->writeLine("        range ".$cur_start." ".$cur_end.";");
						$cur_start = "";
						$cur_end = "";	
					}
				}
			}
			
			# failover only if pool and ranges exists on subnet
			if($pool) {
				$query2 = FS::$dbMgr->Select("fss_dhcp_failover","name","id = '".$data["failover_id"]."'");
				if($data2 = mysql_fetch_array($query2))
					FS::$fileMgr->writeLine("        failover peer \"".$data2["name"]."\";");
				
				FS::$fileMgr->writeLine("");
			}
				
			$network = new FSNetwork();
			$network->setNetAddr($data["net_addr"]);
			$network->setNetMask($data["netmask"]);
			
			$query2 = FS::$dbMgr->Select("fss_dhcp_host","addr,hostname,`hw-ethernet`");
			while($data2 = mysql_fetch_array($query2)) {
				if($network->isUsableIP($data2["addr"])) {
					FS::$fileMgr->writeLine("        host ".$data2["hostname"]." {");
					FS::$fileMgr->writeLine("            hardware ethernet ".$data2["hw-ethernet"].";");
					FS::$fileMgr->writeLine("            fixed-address ".$data2["addr"].";");
					FS::$fileMgr->writeLine("        }");
					FS::$fileMgr->writeLine("");					
				}
			}
			if($pool)
				FS::$fileMgr->writeLine("    }");
				
			FS::$fileMgr->writeLine("}");
			FS::$fileMgr->close();
			return true;
		}
		
		public function writeConfig() {
			FS::$fileMgr->setPath("/etc/dhcp/dhcpd.conf");
			FS::$fileMgr->setOpeningMode("w+");
			if(!FS::$fileMgr->open())
				return false;
			
			$config = $this->getDHCPMainConfig();
			FS::$fileMgr->writeLine("# Auto-generated by FSS-DHCP-FRONTEND");
			FS::$fileMgr->writeLine("");
			
			if(strlen($config["domain"]) > 0)
				FS::$fileMgr->writeLine("option domain-name \"".$config["domain"]."\";");			
				
			FS::$fileMgr->writeLine("option domain-name-servers ".$config["dns1"].(strlen($config["dns2"]) > 0 ? ", ".$config["dns2"] : "").";");
			FS::$fileMgr->writeLine("");
			
			if($config["dnsupdate"] == 1) {
				FS::$fileMgr->writeLine("# DNS updating options");
				FS::$fileMgr->writeLine("ddns-updates on;");
				FS::$fileMgr->writeLine("ddns-update-style interim;");
				
				if(strlen($config["domain"]) > 0)
					FS::$fileMgr->writeLine("ddns-domainname \"".$config["domain"].".\";");
					
				FS::$fileMgr->writeLine("ddns-rev-domainname \"in-addr.arpa.\";");
			}
			else
				FS::$fileMgr->writeLine("ddns-update-style none;");
				
			FS::$fileMgr->writeLine("");
			
			FS::$fileMgr->writeLine("option routers ".$config["router"].";");
			FS::$fileMgr->writeLine("default-lease-time ".$config["suglease"].";");
			FS::$fileMgr->writeLine("max-lease-time ".$config["maxlease"].";");
			FS::$fileMgr->writeLine("log-facility local7;");
			FS::$fileMgr->writeLine("authoritative;");
			if($config["unkcli"] == 0)
				FS::$fileMgr->writeLine("deny unknown-clients;");
			
			FS::$fileMgr->writeLine("# for PXE only");
			FS::$fileMgr->writeLine("option space PXE;");
			FS::$fileMgr->writeLine("option PXE.mtftp-ip               code 1 = ip-address;");
			FS::$fileMgr->writeLine("option PXE.mtftp-cport            code 2 = unsigned integer 16;");
			FS::$fileMgr->writeLine("option PXE.mtftp-sport            code 3 = unsigned integer 16;");
			FS::$fileMgr->writeLine("option PXE.mtftp-tmout            code 4 = unsigned integer 8;");
			FS::$fileMgr->writeLine("option PXE.mtftp-delay            code 5 = unsigned integer 8;");
			FS::$fileMgr->writeLine("option PXE.discovery-control      code 6 = unsigned integer 8;");
			FS::$fileMgr->writeLine("option PXE.discovery-mcast-addr   code 7 = ip-address;");
			if(strlen($config["pxe"]) > 0) {
				FS::$fileMgr->writeLine("");
				FS::$fileMgr->writeLine("allow bootp;");
				FS::$fileMgr->writeLine("allow booting;");
				FS::$fileMgr->writeLine("class \"pxeclients\" {");
				FS::$fileMgr->writeLine("    match if substring (option vendor-class-identifier, 0, 9) = \"PXEClient\";");
				if(strlen($config["pxegw"]))
					FS::$fileMgr->writeLine("    option routers ".$config["pxegw"].";");
				FS::$fileMgr->writeLine("    option PXE.mtftp-ip ".$config["tftp"].";");
				FS::$fileMgr->writeLine("    next-server ".$config["pxe"].";");
				FS::$fileMgr->writeLine("}");
			}
			
			$query = FS::$dbMgr->Select("fss_dhcp_failover","id");
			while($data = mysql_fetch_array($query)) {
				if(FS::$dbMgr->GetOneData("fss_dhcp_subnet","id","failover_id = '".$data["id"]."'"))
					FS::$fileMgr->writeLine("include \"/etc/dhcp/dhcpd-failover-".$data["id"].".conf\";");
			}
			
			$query = FS::$dbMgr->Select("fss_dhcp_subnet","id");
			while($data = mysql_fetch_array($query)) {
				FS::$fileMgr->writeLine("include \"/etc/dhcp/dhcpd-subnet-".$data["id"].".conf\";");
			}
			
			FS::$fileMgr->close();
			
			$query = FS::$dbMgr->Select("fss_dhcp_failover","id");
			while($data = mysql_fetch_array($query)) {
				$this->writeFailover($data["id"]);
			}
			
			$query = FS::$dbMgr->Select("fss_dhcp_subnet","id");
			while($data = mysql_fetch_array($query)) {
				$this->writeSubnet($data["id"]);
			}
			
			FS::$fileMgr->setPath("/tmp/dhcp-reload");
			FS::$fileMgr->setOpeningMode("w");
			if(!FS::$fileMgr->open())
				return false;
			FS::$fileMgr->write("1");
			FS::$fileMgr->close();
			
			return true;
		}
		
		private function getDHCPState() {
			$output = "";
			FS::$fileMgr->setPath("/tmp/dhcp-error");
			FS::$fileMgr->setOpeningMode("r+");
			if(!FS::$fileMgr->open())
				return "";

			$state = FS::$fileMgr->readLine();
			switch($state) {
				case 1: $output .= FS::$iMgr->printError("Le DHCP n'a pas réussi à se recharger, merci d'analyser les logs du serveur."); break;
				case 2: $output .= FS::$iMgr->printDebug("DHCP en cours de redémarrage..."); break;
				case 3: $output .= FS::$iMgr->printError("Le DHCP n'a pas réussi à (re)démarrer, merci d'analyser les logs."); break;
				case 4:	$output .= FS::$iMgr->printError("Le DHCP a tenté sans succès de se recharger."); break;
			}
			
			FS::$fileMgr->close();
			return $output;
		}
		
		private function showSubnetForm($edit = false) {
			$output = "<div id=\"monoComponent\"><h3>".($edit ? "Modification de sous-réseau" : "Création d'un sous-réseau")."</h3>";
			$err = FS::$secMgr->checkAndSecuriseGetData("err");
			switch($err) {
					case 0: break;
					case -1: $output .= $this->iMgr->printError("Certains champs requis sont manquants.");	break;
					case -2: $output .= $this->iMgr->printError("Certains champs ont une valeur dans un format non attendu."); break;
					case -3: $output .= $this->iMgr->printError("La passerelle de votre réseau ne fait pas partie de la plage."); break;
					case -4: $output .= $this->iMgr->printError("Les champs 'Serveur TFTP' et 'Serveur de Boot PXE' sont complémentaires"); break;
					case -5: $output .= $this->iMgr->printError("Le champ 'Passerelle par défaut du PXE' doit être renseigné si les champs 'Serveur TFTP' et 'Serveur de Boot PXE' le sont"); break;
					case -6: $output .= $this->iMgr->printError("Le masque réseau est incorrect"); break;
					default: $output .= $this->iMgr->printError("Erreur inconnue"); break;
				}
			$output .= "<b>Note : </b>Laissez les champs vides afin d'hériter les valeurs de la configuration principale<br /><br />
			<span class=\"required_text\">(*) champ requis</span>";
			
			$link = new HTTPLink($edit ? 72 : 71);
			$output .= "<form action=\"".$link->getIt()."\" method=\"POST\" onsubmit=\"return checkSubnet();\" >";
			if($edit) {
				$netid = FS::$secMgr->checkAndSecuriseGetData("net");
				$output .= $this->iMgr->addHidden("net_id",$netid);
				$query = FS::$dbMgr->Select("fss_dhcp_subnet","net_addr,netmask,domain,dns1,dns2,dnsupdate,maxlease,suglease,tftp,pxe,router,pxegw,failover_id,unkcli","id = '".$netid."'");
				if($data = mysql_fetch_array($query)) {
					$net = $data["net_addr"];
					$mask = $data["netmask"];
					$gw = $data["router"];
					$domain = $data["domain"];
					$dns1 = $data["dns1"];
					$dns2 = $data["dns2"];
					$dnsupdate = ($data["dnsupdate"] > 0) ? true : false;
					$maxlease = $data["maxlease"];
					$suglease = $data["suglease"];
					$tftp = $data["tftp"];
					$pxe = $data["pxe"];
					$pxegw = $data["pxegw"];
					$failover = $data["failover_id"];
					$unkcli = ($data["unkcli"] == 0) ? true : false;
				}
				else
					header('Location: index.php');
			}
			
			$output .= "<table class=\"standardTable\">";
			$output .= $this->iMgr->addIndexedIPLine("Adresse réseau <span class=\"required_text\">(*)</span>","net",$edit ? $net : "");
			$output .= $this->iMgr->addIndexedIPMaskLine("Masque réseau <span class=\"required_text\">(*)</span>","mask",$edit ? $mask : "");
			$output .= $this->iMgr->addIndexedIPLine("Passerelle par défaut <span class=\"required_text\">(*)</span>","gate",$edit ? $gw : "");
			$output .= $this->iMgr->addIndexedLine("Domaine","domain",$edit ? $domain : "");
			$output .= $this->iMgr->addIndexedIPLine("DNS primaire <span class=\"required_text\">(*)</span>","dns1",$edit ? $dns1 : "");
			$output .= $this->iMgr->addIndexedIPLine("DNS secondaire","dns2",$edit ? $dns2 : "");
			$output .= "<tr><td>Mettre à jour le DNS</td><td>";
			$output .= $this->iMgr->addCheck("upddns",$edit ? $dnsupdate : false);
			$output .= "</td></tr>";
			$output .= "<tr><td>Refuser les clients inconnus</td><td>";
			$output .= $this->iMgr->addCheck("unkcli",$edit ? $unkcli : false);
			$output .= "</td></tr>";
			$output .= $this->iMgr->addIndexedLine("Durée de bail maximale <span class=\"required_text\">(*)</span>","maxlease",$edit ? $maxlease : "");
			$output .= $this->iMgr->addIndexedLine("Durée de bail suggérée <span class=\"required_text\">(*)</span>","suglease",$edit ? $suglease : "");
			$output .= "<tr><th colspan=\"2\">PXE</th></tr>";
			$output .= $this->iMgr->addIndexedIPLine("Serveur TFTP","tftp",$edit ? $tftp : "");
			$output .= $this->iMgr->addIndexedIPLine("Serveur de Boot PXE","pxe",$edit ? $pxe : "");
			$output .= $this->iMgr->addIndexedIPLine("Passerelle par défaut du PXE","gwpxe",$edit ? $pxegw : "");
			$output .= "<tr><th colspan=\"2\">Failover</th></tr>";
			$output .= "<tr><td>Sélectionner la règle de failover</td><td>";
			$output .= FS::$iMgr->CreateSelectFromDB("failover","fss_dhcp_failover","name","id","","id",1,($edit ? ($failover == 0 ? NULL : $failover) : NULL),true);
			$output .= "</td></tr>";
			$output .= $this->iMgr->addTableSubmit("reg",$edit ? "Enregistrer" : "Créer");
			$output .= "</table>";
			$output .= "</form>";
			
			if($edit) {
				$output .= "<h4>Range d'adresses distribuées automatiquement</h4>".FS::$iMgr->addJSONLink('{ "at": "2", "mid": "'.$this->mid.'", "do": "5", "net": "'.$netid.'"}',"Ajouter un range d'adresses");
				$exist = false;
				$output2 = "<table class=\"standardTable\" width=\"40%\"><th>Première IP</th><th>Dernière IP</th><th width=\"16px\"></th><th width=\"16px\"></th></tr>";
				$query = FS::$dbMgr->Select("fss_dhcp_ranges","id,start,end","subnet = '".$netid."'");
				$distRange = array();
				while($data = mysql_fetch_array($query)) {
					if(!$exist) {
						$exist = true;
						$output .= $output2;
					}
					$distRange[count($distRange)] = array($data["start"],$data["end"]);
					$output .= "<tr><td>".$data["start"]."</td><td>".$data["end"]."</td><td><a href =\"index.php?mod=".$this->mid."&do=6&rid=".$data["id"]."&net=".$netid."\">";
					$output .= $this->iMgr->addImage("styles/images/pencil.gif",15,15);
					$output .= "</a></td><td><a href=\"index.php?mod=".$this->mid."&act=7&rid=".$data["id"]."&net=".$netid."\">";
					$output .= $this->iMgr->addImage("styles/images/cross.png",15,15);
					$output .= "</a></tr>";
				}
				
				if($exist)
					$output .= "</table>";
				
				$netMgr = new FSNetwork();
				$netMgr->setNetAddr($net);
				$netMgr->setNetMask($mask);
				$output .= "<h4>Réservations</h4>
				
				<table class=\"standardTable\" border=\"0\"><tr><td colspan=\"2\" style=\"border:0px;\"><i>Legende:</i></td></tr>
				<tr><td width=\"15px\" style=\"background-color:#DDDDDD;\"></td><td style=\"border:0px; margin-left:5px;\">Réservé</td></tr>
				<tr><td width=\"15px\" style=\"background-color:#66FF99;\"></td><td style=\"border:0px; margin-left:5px;\">Distribué</td></tr>
				<tr><td width=\"15px\" style=\"background-color:#66CCFF;\"></td><td style=\"border:0px; margin-left:5px;\">Non attribué</td></tr>
				</table><br />
				<table class=\"standardTable\" width=\"80%\"><tr><th width=\"60px\"><center>Adresse IP</center></th><th><center>Hôte</center></th><th width=\"80px\"><center>Adresse MAC</center></th><th>Commentaire</th><th width=\"16px\"></th></tr>";
				for($i=$netMgr->getFirstUsableIPLong();$i<=$netMgr->getLastUsableIPLong();$i++) {
					$query = FS::$dbMgr->Select("fss_dhcp_host","hostname,`hw-ethernet`,description","addr = '".long2ip($i)."'");
					if($data = mysql_fetch_array($query)) {
						$output .= "<tr style=\"background-color:#DDDDDD;\"><td><center>".FS::$iMgr->addJSONLink('{ "at": "2", "mid":"'.$this->mid.'", "do":"7", "ip":"'.long2ip($i).'" }',long2ip($i))."</center></td><td>".$data["hostname"]."</td><td>".$data["hw-ethernet"]."</td><td>".$data["description"]."</td><td><a href=\"index.php?mod=".$this->mid."&act=10&ip=".long2ip($i)."\">";
					$output .= $this->iMgr->addImage("styles/images/cross.png",15,15);
					$output .= "</a></td></tr>";
					}
					else {
						$distrib = false;
						for($j=0;$j<count($distRange);$j++)
							if($netMgr->isIPinRange($distRange[$j][0],$distRange[$j][1],long2ip($i)))
								$distrib = true;
						if($distrib)
							$output .= "<tr style=\"background-color:#66FF99;\">";
						else
							$output .= "<tr style=\"background-color:#66CCFF;\">";
						$output .= "<td><center>".FS::$iMgr->addJSONLink('{ "at": "2", "mid":"'.$this->mid.'", "do":"7", "ip":"'.long2ip($i).'" }',long2ip($i))."</center></td><td></td><td></td><td></td><td></td></tr>";
					}
				}
				$output .= "</table>";
			}
			
			$output .= "</div>";
			return $output;
		}
		
		/*
		* Distributed Ranges
		*/
		
		public function showPool($edit = false) {
			$output = "";
			$err = FS::$secMgr->checkAndSecuriseGetData("err");
			switch($err) {
					case 0: break;
					case 1: $output .= $this->iMgr->printError("Au moins une des adresses rentrées ne sont pas dans le sous-réseau !"); break;
					case 2: $output .= $this->iMgr->printError("Un des champs indiqué n'est pas une adresse IP valide !"); break;
					case 3: $output .= $this->iMgr->printError("Un des champs n'a pas été renseigné !"); break;
					case 4: $output .= $this->iMgr->printError("Ce range d'adresses chevauche un autre range d'adresse. Cochez la case afin de fusionner les ranges."); break;
					case 5: $output .= $this->iMgr->printError("L'adresse IP de début est supérieure à l'adresse IP de fin."); break;
					case 6: $output .= $this->iMgr->printError("Ce range d'adresses existe déjà."); break;
					case 7: $output .= $this->iMgr->printError("Un range d'adresses contient déjà l'ensemble des adresses du range à créer."); break;
					default: $output .= $this->iMgr->printError("Erreur inconnue"); break;
			}
					
			$netid = FS::$secMgr->checkAndSecuriseGetData("net");
			if(!FS::$secMgr->isNumeric($netid))
				header('Location: index.php');
				
			$query = FS::$dbMgr->Select("fss_dhcp_subnet","net_addr,netmask","id = '".$netid."'");
			if($data = mysql_fetch_array($query)) {
				$netaddr = $data["net_addr"];
				$netmask = $data["netmask"];
			}
			else
				header('Location: index.php');
				
			if($edit) {
				$rid = FS::$secMgr->checkAndSecuriseGetData("rid");
				$query = FS::$dbMgr->Select("fss_dhcp_ranges","start,end","id = '".$rid."'");
				if($data = mysql_fetch_array($query)) {
					$startaddr = $data["start"];
					$endaddr = $data["end"];
				}
				else
					header('Location: index.php');
			}
			
			$output .= "<div id=\"monoComponent\"><h3>".($edit ? "Modification du range" : "Création d'un range d'adresses distribuables")."</h3><h4>Sous réseau ".
			$netaddr."/".$netmask."</h4>";
			
			$netMgr = new FSNetwork();
			$netMgr->setNetAddr($netaddr);
			$netMgr->setNetMask($netmask);
			$link = new HTTPLink($edit ? 78 : 77);
			$output .= $this->iMgr->addFormWithReturn($link,"checkDistribRange()");
			$output .= "<table class=\"standardTable\">";
			$output .= $this->iMgr->addIndexedIPLine("Première IP du range","fip",$edit ? $startaddr : $netMgr->getFirstUsableIP());
			$output .= $this->iMgr->addIndexedIPLine("Dernière IP du range","lip", $edit ? $endaddr : $netMgr->getLastUsableIP());
			$output .= "<tr><td>Fusionner les ranges qui se chevauchent ?</td><td>";
			$output .= $this->iMgr->addCheck("fusion");
			$output .= $this->iMgr->addHidden("netid",$netid);
			if($edit)
				$output .= $this->iMgr->addHidden("rangeid",$rid);
			$output .= "</td></tr>";
			$output .= $this->iMgr->addTableSubmit("reg",$edit ? "Enregistrer" : "Créer");
			$output .= "</table></form></div>";
			return $output;
		}
		
		/*
		* General update
		*/ 
		
		public function UpdateGeneralSection() {
			$this->getDHCPMainConfig();
			$gate = FS::$secMgr->checkAndSecurisePostData("gate");
			$domain = FS::$secMgr->checkAndSecurisePostData("domain");
			$dns1 = FS::$secMgr->checkAndSecurisePostData("dns1");
			$dns2 = FS::$secMgr->checkAndSecurisePostData("dns2");
			$dnsupdate = FS::$secMgr->checkAndSecurisePostData("upddns");
			$maxlease = FS::$secMgr->checkAndSecurisePostData("maxlease");
			$suglease = FS::$secMgr->checkAndSecurisePostData("suglease");
			$tftp = FS::$secMgr->checkAndSecurisePostData("tftp");
			$pxe = FS::$secMgr->checkAndSecurisePostData("pxe");
			$pxegw = FS::$secMgr->checkAndSecurisePostData("pxegw");
			$unkcli = FS::$secMgr->checkAndSecurisePostData("unkcli");
			
			if($gate == "" || $dns1 == "" || $maxlease == "" || $suglease == "")
				return 1;
				
			if(!FS::$secMgr->isIP($gate) || !FS::$secMgr->isIP($dns1) || ($dns2 != "" && !FS::$secMgr->isIP($dns2)) ||
				($tftp != "" && !FS::$secMgr->isIP($tftp)) || ($pxe != "" && !FS::$secMgr->isIP($pxe)) ||
				!FS::$secMgr->isNumeric($maxlease) || !FS::$secMgr->isNumeric($suglease))
				return 2;
			
			if($maxlease < 300 || $suglease < 300)
				return 3;
				
			if($maxlease <= $suglease)
				return 4;
			
			if($domain && strlen($domain) > 0 && !FS::$secMgr->isDNSAddr($domain))
				return 5;
				
			if($tftp != "" && $pxe == "" || $pxe != "" && $tftp == "")
				return 6;
				
			if($pxegw != "" && ($pxe == "" || $tftp == ""))
				return 7;
				
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$gate."'","fss_dhcp_config.key = 'router'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$domain."'","fss_dhcp_config.key = 'domain'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$dns1."'","fss_dhcp_config.key = 'dns1'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$dns2."'","fss_dhcp_config.key = 'dns2'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".($dnsupdate == "on" ? 1 : 0)."'","fss_dhcp_config.key = 'dnsupdate'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$maxlease."'","fss_dhcp_config.key = 'maxlease'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$suglease."'","fss_dhcp_config.key = 'suglease'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$tftp."'","fss_dhcp_config.key = 'tftp'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$pxe."'","fss_dhcp_config.key = 'pxe'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".$pxegw."'","fss_dhcp_config.key = 'pxegw'");
			FS::$dbMgr->Update("fss_dhcp_config","value = '".($unkcli == "on" ? 0 : 1)."'","fss_dhcp_config.key = 'unkcli'");
			return 0;
		}
		
		public function CreateSubnet() {
			$net = FS::$secMgr->checkAndSecurisePostData("net");
			$mask = FS::$secMgr->checkAndSecurisePostData("mask");
			$gate = FS::$secMgr->checkAndSecurisePostData("gate");
			$domain = FS::$secMgr->checkAndSecurisePostData("domain");
			$dns1 = FS::$secMgr->checkAndSecurisePostData("dns1");
			$dns2 = FS::$secMgr->checkAndSecurisePostData("dns2");
			$dnsupdate = FS::$secMgr->checkAndSecurisePostData("upddns");
			$maxlease = FS::$secMgr->checkAndSecurisePostData("maxlease");
			$suglease = FS::$secMgr->checkAndSecurisePostData("suglease");
			$tftp = FS::$secMgr->checkAndSecurisePostData("tftp");
			$pxe = FS::$secMgr->checkAndSecurisePostData("pxe");
			$pxegw = FS::$secMgr->checkAndSecurisePostData("gwpxe");
			$failover = FS::$secMgr->checkAndSecurisePostData("failover");
			$unkcli = FS::$secMgr->checkAndSecurisePostData("unkcli");
			
			
			if($net == "" || $mask == "" || $gate == "" || $dns1 == "" || $maxlease == "" || $suglease == "")
				return -1;
			
			if(!FS::$secMgr->isIP($gate) || !FS::$secMgr->isIP($dns1) || ($dns2 != "" && !FS::$secMgr->isIP($dns2)) ||
				($tftp != "" && !FS::$secMgr->isIP($tftp)) || ($pxe != "" && !FS::$secMgr->isIP($pxe)) || !FS::$secMgr->isIP($net) ||
				!FS::$secMgr->isIP($mask) || !FS::$secMgr->isNumeric($maxlease) || !FS::$secMgr->isNumeric($suglease) || $pxegw != "" && !FS::$secMgr->isIP($pxegw))
				return -2;
			
			if($tftp != "" && $pxe == "" || $pxe != "" && $tftp == "")
				return -4;
			
			if($pxegw != "" && ($pxe == "" || $tftp == ""))
				return -5;
				
			$netMgr = new FSNetwork();
			$netMgr->setNetAddr($net);
			$netMgr->setNetMask($mask);
			if(!$netMgr->isUsableIP($gate))
				return -3;
				
			if(!FS::$secMgr->isMaskAddr($mask))
				return -6;
			/**
			* Verify :
			* Subnet is not already here
			* Subnet is correct
			* Subnet is not over an existing subnet
			* Old Distributed ranges and attributed IP are in network
			*/
			
			FS::$dbMgr->Insert("fss_dhcp_subnet","net_addr,netmask,domain,dns1,dns2,dnsupdate,maxlease,suglease,tftp,pxe,router,failover_id,pxegw,unkcli","'".$net."','".$mask."','".
				$domain."','".$dns1."','".$dns2."','".($dnsupdate == "on" ? 1 : 0)."','".$maxlease."','".$suglease."','".$tftp."','".$pxe."','".$gate."','".$failover."','".$pxegw."','".
				($unkcli == "on" ? 0 : 1)."'");
			
			$id = FS::$dbMgr->GetOneData("fss_dhcp_subnet","id","net_addr = '".$net."' AND netmask = '".$mask."' AND domain = '".$domain."' AND dns1 = '".$dns1."' AND router = '".$gate."' AND dns2 = '".
				$dns2."' AND maxlease = '".$maxlease."' AND suglease = '".$suglease."'");
			return $id;
		}
		
		public function UpdateSubnet() {
			$subnet_id = FS::$secMgr->checkAndSecurisePostData("net_id");
			$net = FS::$secMgr->checkAndSecurisePostData("net");
			$mask = FS::$secMgr->checkAndSecurisePostData("mask");
			$gate = FS::$secMgr->checkAndSecurisePostData("gate");
			$domain = FS::$secMgr->checkAndSecurisePostData("domain");
			$dns1 = FS::$secMgr->checkAndSecurisePostData("dns1");
			$dns2 = FS::$secMgr->checkAndSecurisePostData("dns2");
			$dnsupdate = FS::$secMgr->checkAndSecurisePostData("upddns");
			$maxlease = FS::$secMgr->checkAndSecurisePostData("maxlease");
			$suglease = FS::$secMgr->checkAndSecurisePostData("suglease");
			$tftp = FS::$secMgr->checkAndSecurisePostData("tftp");
			$pxe = FS::$secMgr->checkAndSecurisePostData("pxe");
			$pxegw = FS::$secMgr->checkAndSecurisePostData("gwpxe");
			$failover = FS::$secMgr->checkAndSecurisePostData("failover");
			$unkcli = FS::$secMgr->checkAndSecurisePostData("unkcli");
			
			if($net == "" || $mask == "" || $gate == "" || $dns1 == "" || $maxlease == "" || $suglease == "")
				return array($subnet_id,-1);
			
			if(!FS::$secMgr->isIP($gate) || !FS::$secMgr->isIP($dns1) || ($dns2 != "" && !FS::$secMgr->isIP($dns2)) ||
				($tftp != "" && !FS::$secMgr->isIP($tftp)) || ($pxe != "" && !FS::$secMgr->isIP($pxe)) || !FS::$secMgr->isIP($net) ||
				!FS::$secMgr->isIP($mask) || !FS::$secMgr->isNumeric($maxlease) || !FS::$secMgr->isNumeric($suglease) || $pxegw != "" && !FS::$secMgr->isIP($pxegw))
				return array($subnet_id,-2);
				
			if($tftp != "" && $pxe == "" || $pxe != "" && $tftp == "")
				return array($subnet_id,-4);
				
			if($pxegw != "" && ($pxe == "" || $tftp == ""))
				return array($subnet_id,-5);
			
			$netMgr = new FSNetwork();
			$netMgr->setNetAddr($net);
			$netMgr->setNetMask($mask);
			if(!$netMgr->isUsableIP($gate))
				return array($subnet_id,-3);
				
			if(!FS::$secMgr->isMaskAddr($mask))
				return array($subnet_id,-6);
			/**
			* Verify :
			* Subnet is not already here
			* Subnet is correct
			* Subnet is not over an existing subnet
			* Old Distributed ranges and attributed IP are in network
			*/
			
			FS::$dbMgr->Update("fss_dhcp_subnet","net_addr = '".$net."', netmask = '".$mask."', domain = '".$domain."', dns1 = '".$dns1."', dns2 = '".$dns2."', 
				dnsupdate = '".($dnsupdate == "on" ? 1 : 0)."', maxlease = '".$maxlease."', suglease = '".$suglease."', tftp = '".$tftp."', pxe = '".$pxe."', router = '".$gate."',
				failover_id = '".$failover."', pxegw ='".$pxegw."', unkcli = '".($unkcli == "on" ? 0 : 1)."'","id = '".$subnet_id."'");
			
			return $subnet_id;
		}
		
		public function DeleteSubnet() {
			$net = FS::$secMgr->checkAndSecuriseGetData("net");
			if(!FS::$secMgr->isNumeric($net))
				return;
			
			FS::$dbMgr->Delete("fss_dhcp_subnet","id = '".$net."'");
			FS::$dbMgr->Delete("fss_dhcp_ranges","subnet = '".$net."'");
		}
		
		/*
		* Distributed Ranges
		*/
		
		private function CheckDistributedRange($net,$start,$end,$fusion,$rid = 0) {
			if(!FS::$secMgr->isNumeric($net))
				return array(0,-1);
				
			if(!$start || !$end)
				return array($net,3);
				
			if(!FS::$secMgr->isIP($start) || !FS::$secMgr->isIP($end))
				return array($net,2);
			
			$netMgr = new FSNetwork();
			
			$query = FS::$dbMgr->Select("fss_dhcp_subnet","net_addr,netmask","id = '".$net."'");
			if($data = mysql_fetch_array($query)) {
				
				$netMgr->setNetAddr($data["net_addr"]);
				$netMgr->setNetMask($data["netmask"]);
				if(!$netMgr->isUsableIP($start) || !$netMgr->isUsableIP($end))
					return array($net,1);
			}
			else
				return array($net,-1);
			
			if($netMgr->isIPAfterIP($start,$end))
				return array($net,5);
			
			$range_fusion = array();
			$query = FS::$dbMgr->Select("fss_dhcp_ranges","id,start,end","subnet = '".$net."' AND id <> '".$rid."'");
			while($data = mysql_fetch_array($query)) {
				if($data["start"] == $start && $data["end"] == $end)
					return array($net,6);
				
				if($netMgr->isIPTouchRange($data["start"],$data["end"],$start) && $netMgr->isIPTouchRange($data["start"],$data["end"],$end))
					return array($net,7);	

				if($netMgr->isIPTouchRange($data["start"],$data["end"],$start) || $netMgr->isIPTouchRange($data["start"],$data["end"],$end)) {
					if($fusion != "on")			
						return array($net,4);
					
					if(!in_array($data["id"],$range_fusion))
						$range_fusion[count($range_fusion)] = $data["id"];
				}
					
				if($netMgr->isIPTouchRange($start,$end,$data["start"]) || $netMgr->isIPTouchRange($start,$end,$data["end"])) {
					if($fusion != "on")
						return array($net,4);
						
					if(!in_array($data["id"],$range_fusion))
						$range_fusion[count($range_fusion)] = $data["id"];
				}
			}
			
			if(count($range_fusion) > 0) {
				$minIP = $start;
				$maxIP = $end;
				for($i=0;$i<count($range_fusion);$i++) {
					$query = FS::$dbMgr->Select("fss_dhcp_ranges","start,end","id = '".$range_fusion[$i]."'");
					if($data = mysql_fetch_array($query)) {
						if(ip2long($data["start"]) < ip2long($minIP))
							$minIP = $data["start"];
						
						if(ip2long($data["end"]) > ip2long($maxIP))
							$maxIP = $data["end"];
							
						FS::$dbMgr->Delete("fss_dhcp_ranges","id = '".$range_fusion[$i]."'");
					}
				}
				FS::$dbMgr->Insert("fss_dhcp_ranges","start,end,subnet","'".$minIP."','".$maxIP."','".$net."'");
				$net = -$net;
			}
			return $net; // net
		}

		public function CreateDistributedRange() {
			$net = FS::$secMgr->checkAndSecurisePostData("netid");
			$start = FS::$secMgr->checkAndSecurisePostData("fip");
			$end = FS::$secMgr->checkAndSecurisePostData("lip");
			$fusion = FS::$secMgr->checkAndSecurisePostData("fusion");
			
			$result = $this->CheckDistributedRange($net,$start,$end,$fusion);
			if(is_array($result))
				return $result;
			
			if($result > 0) {
				FS::$dbMgr->Insert("fss_dhcp_ranges","start,end,subnet","'".$start."','".$end."','".$net."'");
				return $result;
			}
			else
				return -$result;
		}
		
		public function UpdateDistributedRange() {
			$net = FS::$secMgr->checkAndSecurisePostData("netid");
			$start = FS::$secMgr->checkAndSecurisePostData("fip");
			$end = FS::$secMgr->checkAndSecurisePostData("lip");
			$fusion = FS::$secMgr->checkAndSecurisePostData("fusion");
			$rangeid = FS::$secMgr->checkAndSecurisePostData("rangeid");
			
			$result = $this->CheckDistributedRange($net,$start,$end,$fusion,$rangeid);
			if(is_array($result)) {
				$result = array($result[0],$result[1],$rangeid);
				return $result;
			}
			
			if($result > 0) {
				FS::$dbMgr->Update("fss_dhcp_ranges","start = '".$start."', end = '".$end."', subnet = '".$net."'","id = '".$rangeid."'");
				return $result;
			}
			else
				return -$result;
		}
		
		public function DeleteDistributedRange() {
			$rangeid = FS::$secMgr->checkAndSecuriseGetData("rid");
			$net = FS::$secMgr->checkAndSecuriseGetData("net");
			
			if(!FS::$secMgr->isNumeric($net))
				return 0;
			
			FS::$dbMgr->Delete("fss_dhcp_ranges","id = '".$rangeid."'");
			return $net;
		}
		
		private function showReserv() {
			$output = "";
			$ip = FS::$secMgr->CheckAndSecuriseGetData("ip");
			$err = FS::$secMgr->CheckAndSecuriseGetData("err");
			if(!FS::$secMgr->isIP($ip))
				header('Location: index.php');
				
			$output .= "<div id=\"monoComponent\"><h3>Réservation</h3>";
			switch($err) {
				case 0: break;
				case 1: $output .= FS::$iMgr->printError("L'adresse MAC entrée n'est pas valide !"); break;
				case 2: $output .= FS::$iMgr->printError("Le nom d'hôte entré n'est pas valide !"); break;
				case 3: $output .= FS::$iMgr->printError("L'adresse MAC entrée est déjà référencée pour une autre adresse !"); break;
				case 4: $output .= FS::$iMgr->printError("Le nom d'hôte entré existe déjà !"); break;
				default: break;
			}

			$hostname = $desc = $hw = "";
			$link = new HTTPLink(79);
			$query = FS::$dbMgr->Select("fss_dhcp_host","hostname,description,`hw-ethernet`","addr = '".$ip."'");
			if($data = mysql_fetch_array($query)) {
				$hostname = $data["hostname"];
				$desc = $data["description"];
				$hw = $data["hw-ethernet"];
			}
			$output .= FS::$iMgr->addFormWithReturn($link,"checkReserv(".($hw != "" ? "true" : "false").")","resform");
			$output .= FS::$iMgr->addHidden("ip",$ip);
			$output .= "<table class=\"standardTable\" width=\"50%\"><tr><th>IP</th><th>".$ip."</th></tr>";
			$output .= FS::$iMgr->addIndexedLine("Nom d'hôte","host",$hostname);
			$output .= FS::$iMgr->addIndexedLine("Adresse MAC","hw", $hw);
			$output .= FS::$iMgr->addIndexedLine("Description","desc",$desc);
			$output .= FS::$iMgr->addTableSubmit("reg","Enregistrer");
			$output .= "</form></table></div>";
			return $output;
		}

		public function addOrUpdateReserv($ajax = false) {
			$ip = FS::$secMgr->CheckAndSecurisePostData("ip");
			$host = FS::$secMgr->CheckAndSecurisePostData("host");
			$hw = FS::$secMgr->CheckAndSecurisePostData("hw");
			$desc = FS::$secMgr->CheckAndSecurisePostData("desc");

			if(!FS::$secMgr->isIP($ip))
				return ($ajax ? -5 : array($ip,-1));

			if(!FS::$secMgr->isMacAddr($hw))
				return ($ajax ? -1 : array($ip,1));

			if(!$this->isValidHostname($host))
				return ($ajax ? -2 : array($ip,2));
			
			if($hw2 = FS::$dbMgr->GetOneData("fss_dhcp_host","`hw-ethernet`","`hw-ethernet` = '".$hw."' and addr != '".$ip."'"))
				return ($ajax ? -3 : array($ip,3));
				
			if($host2 = FS::$dbMgr->GetOneData("fss_dhcp_host","hostname","hostname = '".$host."' and addr != '".$ip."'"))
				return ($ajax ? -4 : array($ip,4));
			
			if($addr2 = FS::$dbMgr->GetOneData("fss_dhcp_host","addr","addr = '".$ip."'"))
				FS::$dbMgr->Update("fss_dhcp_host","hostname = '".$host."', `hw-ethernet` = '".$hw."', description = '".$desc."'","addr = '".$ip."'");
			else
				FS::$dbMgr->Insert("fss_dhcp_host","addr,hostname,`hw-ethernet`,description","'".$ip."','".$host."','".$hw."','".$desc."'");
			return $this->getSubnetByAddr($ip);
		}
		
		public function deleteReserv() {
			$ip = FS::$secMgr->CheckAndSecuriseGetData("ip");
			
			FS::$dbMgr->Delete("fss_dhcp_host","addr  = '".$ip."'");
			return $this->getSubnetByAddr($ip);
		}
		
		private function isValidHostname($host) {
			if(!$host)
				return false;
				
			if(preg_match("#^[a-zA-Z]([a-zA-Z0-9_-]*)[a-zA-Z0-9]$#",$host))
				return true;
				
			return false;			
		}
		
		private function getSubnetByAddr($ip) {
			$query = FS::$dbMgr->Select("fss_dhcp_subnet","id,net_addr,netmask");
			while($data = mysql_fetch_array($query)) {
				$netMgr = new FSNetwork();
				$netMgr->setNetAddr($data["net_addr"]);
				$netMgr->setNetMask($data["netmask"]);
				if($netMgr->isUsableIP($ip))
					return $data["id"];
			}
			return 0;
		}
		
		private function showFailover($edit = false) {
			$output = "<div id=\"monoComponent\"><h3>".($edit ? "Modification de failover" : "Création d'un failover")."</h3>";
			$err = FS::$secMgr->checkAndSecuriseGetData("err");
			switch($err) {
				case 0: break;
				case 1: $output .= FS::$iMgr->printError("Un des champs requis est manquant"); break;
				case 2: $output .= FS::$iMgr->printError("Un DHCP primaire en failover requiert les champs (3) et (4)"); break;
				case 3: $output .= FS::$iMgr->printError("Un DHCP secondaire ne requiert pas les champs (3) et (4)"); break;
				case 4: $output .= FS::$iMgr->printError("Un des champs contient une valeur dont le type est erroné"); break;
				case 5: $output .= FS::$iMgr->printError("Un failover du même nom existe déjà"); break;				
				default: break;			
			}
			$link = new HTTPLink($edit ? 82 : 81);
			$output .= "<form action=\"".$link->getIt()."\" method=\"POST\" onsubmit=\"return checkFailover();\">";
			if($edit) {
				$fid = FS::$secMgr->checkAndSecuriseGetData("fid");
				
				$query = FS::$dbMgr->Select("fss_dhcp_failover","name,`primary`,s_addr,s_port,d_addr,d_port,`resp-delay`,`max-unack`,`max-balance`,mclt,split","id = '".$fid."'");
				if($data = mysql_fetch_array($query)) {
					$name = $data["name"];
					$primary = ($data["primary"] == 1) ? true : false;
					$s_addr = $data["s_addr"];
					$s_port = $data["s_port"];
					$d_addr = $data["d_addr"];
					$d_port = $data["d_port"];
					$ansdelay = $data["resp-delay"];
					$mack = $data["max-unack"];
					$mbl = $data["max-balance"];
					$mclt = $data["mclt"];
					$split = $data["split"];
				}
				else
					header("Location: index.php");
				
			}
			$output .= "<table class=\"standardTable\">";
			$output .= FS::$iMgr->addIndexedLine("Identifiant failover","name",$edit ? $name : "");
			$output .= "<tr><td>DHCP primaire ? <i>(1)</i></td><td>";
			$output .= FS::$iMgr->addCheck("primary",$edit ? $primary : false);
			if($edit)
				$output .= FS::$iMgr->addHidden("fid",$fid);
			$output .= "</td></tr>";
			$output .= FS::$iMgr->addIndexedIPLine("Adresse IP Source","saddr",$edit ? $s_addr : "");
			$output .= FS::$iMgr->addIndexedNumericLine("Port Source","sport",$edit ? $s_port : "");
			$output .= FS::$iMgr->addIndexedIPLine("Adresse IP de Destination","daddr",$edit ? $d_addr : "");
			$output .= FS::$iMgr->addIndexedNumericLine("Port de Destination","dport",$edit ? $d_port : "");
			$output .= FS::$iMgr->addIndexedLine("Délai de réponse (en secondes)","ansdelay",$edit ? $ansdelay : "");
			$output .= FS::$iMgr->addIndexedNumericLine("Nombre de requêtes maximum non acquitées","maxack",$edit ? $mack : "");
			$output .= FS::$iMgr->addIndexedNumericLine("Durée de Surcharge maximum (en secondes) <i>(2)</i>","loadbalance",$edit ? $mbl : "");
			$output .= FS::$iMgr->addIndexedNumericLine("Temps maximum de réponse du pair en cas d'échec (en secondes) <i>(3)</i>","mclt",$edit ? $mclt : "");
			$output .= FS::$iMgr->addIndexedNumericLine("Pourcentage de baux délivrés par le serveur primaire <i>(4)</i>","split",$edit ? $split : "");
			$output .= FS::$iMgr->addTableSubmit("reg","Enregistrer");
			$output .= "</table></form><br />
			<i>(1)</i> Un DHCP primaire est un DHCP s'exécutant et répondant aux requêtes<br />
			<i>(2)</i> Durée maximum pendant laquelle le DHCP utilisera toute la puissance processeur avant de passer la main au DHCP secondaire<br />
			<i>(3)</i> Temps maximum pendant lequel le bail sera délivré par le serveur DHCP secondaire, dans le cas où le DHCP primaire est de nouveau en ligne 
			(nombres de secondes depuis l'allumage du DHCP primaire)<br />
			<i>(4)</i> Exemple, si la valeur est de 40, 60% des baux seront délivrés par le DHCP secondaire.<br />
			</div>";
			return $output;
		}
		
		public function CreateFailover() {
			$name = FS::$secMgr->CheckAndSecurisePostData("name");
			$primary = (FS::$secMgr->CheckAndSecurisePostData("primary") == "on") ? 1 : 0;
			$saddr = FS::$secMgr->CheckAndSecurisePostData("saddr");
			$sport = FS::$secMgr->CheckAndSecurisePostData("sport");
			$daddr = FS::$secMgr->CheckAndSecurisePostData("daddr");
			$dport = FS::$secMgr->CheckAndSecurisePostData("dport");
			$ansdelay = FS::$secMgr->CheckAndSecurisePostData("ansdelay");
			$maxack = FS::$secMgr->CheckAndSecurisePostData("maxack");
			$mclt = FS::$secMgr->CheckAndSecurisePostData("mclt");
			$split = FS::$secMgr->CheckAndSecurisePostData("split");
			$lb = FS::$secMgr->CheckAndSecurisePostData("loadbalance");
			
			if(!$name || !$saddr || !$sport || !$daddr || !$dport || !$ansdelay || !$maxack || !$lb)
				return array(0,1);
				
			if($primary == 1 && (!$split || !$mclt))
				return array(0,2);
				
			if($primary == 0 && ($split || $mclt))
				return array(0,3);
				
			if(!FS::$secMgr->isNumeric($sport) || $sport > 65535 || $sport < 1 || !FS::$secMgr->isNumeric($dport)  || $dport > 65535 || $dport < 1 ||
				!FS::$secMgr->isNumeric($ansdelay) || !FS::$secMgr->isNumeric($maxack) || !FS::$secMgr->isNumeric($lb) || !FS::$secMgr->isIP($saddr) ||
				!FS::$secMgr->isIP($daddr) || ($split && (!FS::$secMgr->isNumeric($split) || $split > 100 || $split < 1)) || !$this->isValidHostname($name) ||
				($mclt && (!FS::$secMgr->isNumeric($mclt) || $mclt < 2)) || $maxack < 2 || $lb < 2 )
				return array(0,4);
			
			
			if(FS::$dbMgr->GetOneData("fss_dhcp_failover","id","name = '".$name."' AND id <> '".$fid."'"))
				return array(0,5);
			
			FS::$dbMgr->Insert("fss_dhcp_failover","name,`primary`,s_addr,s_port,d_addr,d_port,`resp-delay`,
			`max-unack`,`max-balance`,mclt,split","'".$name."','".$primary."','".$saddr."','".$sport."','".
			$daddr."','".$dport."','".$ansdelay."','".$maxack."','".$lb."','".$mclt."','".$split."'");
			return FS::$dbMgr->GetOneData("fss_dhcp_failover","id","name = '".$name."'");
		}
		
		public function UpdateFailover() {
			$fid = FS::$secMgr->CheckAndSecurisePostData("fid");
			$name = FS::$secMgr->CheckAndSecurisePostData("name");
			$primary = (FS::$secMgr->CheckAndSecurisePostData("primary") == "on") ? 1 : 0;
			$saddr = FS::$secMgr->CheckAndSecurisePostData("saddr");
			$sport = FS::$secMgr->CheckAndSecurisePostData("sport");
			$daddr = FS::$secMgr->CheckAndSecurisePostData("daddr");
			$dport = FS::$secMgr->CheckAndSecurisePostData("dport");
			$ansdelay = FS::$secMgr->CheckAndSecurisePostData("ansdelay");
			$maxack = FS::$secMgr->CheckAndSecurisePostData("maxack");
			$mclt = FS::$secMgr->CheckAndSecurisePostData("mclt");
			$split = FS::$secMgr->CheckAndSecurisePostData("split");
			$lb = FS::$secMgr->CheckAndSecurisePostData("loadbalance");	
			
			if(!$name || !$saddr || !$sport || !$daddr || !$dport || !$ansdelay || !$maxack || !$lb)
				return array($fid,1);
				
			if($primary == 1 && (!$split || !$mclt))
				return array($fid,2);
				
			if($primary == 0 && ($split || $mclt))
				return array($fid,3);
				
			if(!FS::$secMgr->isNumeric($sport) || $sport > 65535 || $sport < 1 || !FS::$secMgr->isNumeric($dport)  || $dport > 65535 || $dport < 1 ||
				!FS::$secMgr->isNumeric($ansdelay) || !FS::$secMgr->isNumeric($maxack) || !FS::$secMgr->isNumeric($lb) || !FS::$secMgr->isIP($saddr) ||
				!FS::$secMgr->isIP($daddr) || ($split && (!FS::$secMgr->isNumeric($lb) || $split > 100)) || !$this->isValidHostname($name) ||
				($mclt && !FS::$secMgr->isNumeric($mclt)))
				return array($fid,4);
				
			if(FS::$dbMgr->GetOneData("fss_dhcp_failover","id","name = '".$name."' AND id <> '".$fid."'"))
				return array($fid,5);
			
			FS::$dbMgr->Update("fss_dhcp_failover","name = '".$name."',`primary` = '".$primary."',s_addr = '".$saddr.
			"',s_port = '".$sport."',d_addr = '".$daddr."',d_port = '".$dport."',`resp-delay` = '".$ansdelay."',
			`max-unack` = '".$maxack."',`max-balance`='".$lb."',mclt='".$mclt."',split='".$split."'","id = '".$fid."'");
			
			return $fid;
		}
		
		public function DeleteFailover() {
			$fid = FS::$secMgr->CheckAndSecuriseGetData("fid");
			FS::$dbMgr->Update("fss_dhcp_subnet","failover_id = '0'","failover_id = '".$fid."'");
			FS::$dbMgr->Delete("fss_dhcp_failover","id  = '".$fid."'");
		}
		
		public function showMain() {
			$output = "";
			$err = FS::$secMgr->checkGetData("err");
			switch($err) {
				case 0: break;
				case -1: $output .= FS::$iMgr->printDebug("Modification effectuée !");	break;
				case 1:	$output .= FS::$iMgr->printError("Certains champs requis ne sont pas remplis !");	break;
				case 2:	$output .= FS::$iMgr->printError("Certains champs ont des valeurs dans un format non attendu !");	break;
				case 3: $output .= FS::$iMgr->printError("La durée de bail maximale/suggérée ne peut être inférieure à 300 secondes"); break;
				case 4: $output .= FS::$iMgr->printError("La durée suggérée de bail ne peut être inférieure à la durée maximale du bail"); break;
				case 5: $output .= FS::$iMgr->printError("Le nom de domaine entré n'est pas valide"); break;
				case 6: $output .= FS::$iMgr->printError("Les champs 'Serveur TFTP' et 'Serveur de boot PXE' sont complémentaires"); break;
				case 7: $output .= FS::$iMgr->printError("Le champ 'Passerelle par défaut du PXE' requiet les champs 'Serveur TFTP' et 'Serveur de boot PXE'"); break;
				default:
					$output .= FS::$iMgr->printError("Erreur inconnue");
					break;
			}
			$output .= "<div id=\"monoComponent\">";
			$output .= $this->getDHCPState();
			$output .= "<h3>Configuration de DHCP</h3>
			<p><center>";
			$link = new HTTPLink(83);
			$output .= $this->iMgr->addForm($link->getIt());
			$output .= $this->iMgr->addSubmit("apply","Appliquer la configuration");
			$output .= "</form>";
			$output .= $this->iMgr->addSubmit("reset","Réinitialiser la configuration");
			$output .= "</center></p><h4>Configuration générale</h4>
			<span class=\"required_text\">(*) champ requis</span>";
			$link = new HTTPLink(75);
			$output .= "<form action=\"".$link->getIt()."\" method=\"POST\" onsubmit=\"return checkMainConfig();\">";
			$output .= "<table class=\"standardTable\" width=\"60%\">
			<tr><th colspan=\"2\">DHCP</th></tr>";
			$dhcpConfig = $this->getDHCPMainConfig();
			$output .= $this->iMgr->addIndexedIPLine("Routeur par défaut <span class=\"required_text\">(*)</span>","gate",$dhcpConfig["router"]);
			$output .= $this->iMgr->addIndexedLine("Domaine","domain",$dhcpConfig["domain"]);
			$output .= $this->iMgr->addIndexedIPLine("DNS primaire <span class=\"required_text\">(*)</span>","dns1",$dhcpConfig["dns1"]);
			$output .= $this->iMgr->addIndexedIPLine("DNS secondaire","dns2",$dhcpConfig["dns2"]);
			$output .= "<tr><td>Mettre à jour le DNS</td><td><center>";
			$output .= $this->iMgr->addCheck("upddns",($dhcpConfig["dnsupdate"] > 0) ? true : false);
			$output .= "</center></td></tr>";
			$output .= "<tr><td>Refuser les clients inconnus</td><td><center>";
			$output .= $this->iMgr->addCheck("unkcli",($dhcpConfig["unkcli"] == 0) ? true : false);
			$output .= "</center></td></tr>";
			$output .= $this->iMgr->addIndexedNumericLine("Durée de bail maximale <span class=\"required_text\">(*)</span>","maxlease",$dhcpConfig["maxlease"]);
			$output .= $this->iMgr->addIndexedNumericLine("Durée de bail suggérée <span class=\"required_text\">(*)</span>","suglease",$dhcpConfig["suglease"]);
			$output .= "<tr><th colspan=\"2\">PXE</th></tr>";
			$output .= $this->iMgr->addIndexedIPLine("Serveur TFTP","tftp",$dhcpConfig["tftp"]);
			$output .= $this->iMgr->addIndexedIPLine("Serveur de Boot PXE","pxe",$dhcpConfig["pxe"]);
			$output .= $this->iMgr->addIndexedIPLine("Passerelle par défaut du PXE","pxegw",$dhcpConfig["pxegw"]);
			$output .= $this->iMgr->addTableSubmit("reg","Enregistrer");
			$output .= "</table></form>

			<h4>Configuration des sous-réseaux</h4>";
			$output .= FS::$iMgr->addJSONLink('{ "at": "2", "mid": "'.$this->mid.'", "do": "1" }',"Ajouter un réseau à distribuer");

			$subnets = "<table class=\"standardTable\" width=\"55%\">
			<tr><th>Réseau</th><th>Masque</th><th></th></tr>";
			$exist = false;
			$query = FS::$dbMgr->Select("fss_dhcp_subnet","id,net_addr,netmask","","net_addr");
			while($data = mysql_fetch_array($query)) {
				if(!$exist) {
					$output .= $subnets;
					$exist = true;
				}
				$output .= "<tr><td><center>".FS::$iMgr->addJSONLink('{ "at": "2", "mid": "'.$this->mid.'", "do": "2", "net": "'.$data["id"].'" }',$data["net_addr"])."</center></td><td><center>".$data["netmask"]."</center></td><td width=\"15px\"><a href =\"index.php?mod=".$this->mid."&act=4&net=".$data["id"]."\">";
				$output .= $this->iMgr->addImage("styles/images/cross.png",15,15);
				$output .= "</a></td></tr>";
			}
			if($exist)
				$output .= "</table>";
				
			$output .= "<h4>Configuration des failover</h4>";
			$exist = false;
			$output .= FS::$iMgr->addJSONLink('{ "at": "2", "mid": "'.$this->mid.'", "do": "3" }',"Créer un failover");
			$subnets = "<table class=\"standardTable\" width=\"60%\">
			<tr><th>Nom</th><th>Source</th><th>Destination</th><th>Type</th><th></th></tr>";
			$query = FS::$dbMgr->Select("fss_dhcp_failover","id,name,s_addr,s_port,d_addr,d_port,`primary`");
			while($data = mysql_fetch_array($query)) {
				if(!$exist) {
					$output .= $subnets;
					$exist = true;
				}
				$output .= "<tr><td><center>".FS::$iMgr->addJSONLink('{ "at": "2", "mid": "'.$this->mid.'", "do": "4", "fid": "'.$data["id"].'" }',$data["name"])."</center></td><td><center><b>".$data["s_addr"].":".$data["s_port"]."</b></center></td>
				<td><center><b>".$data["d_addr"].":".$data["d_port"]."</b></center></td><td><center>".($data["primary"] == 1 ? "Primaire" : "Secondaire")."
				</center></td><td width=\"16px\"><a href =\"index.php?mod=".$this->mid."&act=13&fid=".$data["id"]."\">";
				$output .= $this->iMgr->addImage("styles/images/cross.png",15,15);
				$output .= "</a></td></tr>";
			}
			if($exist)
				$output .= "</table>";
			$output .= "</div>";
			return $output;
		}
		
		private function getDHCPMainConfig() {
			$config = array();
			$query = FS::$dbMgr->Select("fss_dhcp_config","fss_dhcp_config.key,value");
			while($data = mysql_fetch_array($query)) {
				switch($data["key"]) {
					case "router":
					case "domain":
					case "dns1":
					case "dns2":
					case "dnsupdate":
					case "maxlease":
					case "suglease":
					case "tftp":
					case "pxe":
					case "pxegw":
					case "unkcli":
						$config[$data["key"]] = $data["value"];
						break;	
					default: break;	
				}
			}
			
			if(!array_key_exists("router",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'router','0.0.0.0'");
				$config["router"] = "0.0.0.0";	
			}
				
			if(!array_key_exists("domain",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'domain','company.domain'");
				$config["domain"] = "company.domain";
			}
				
			if(!array_key_exists("dns1",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'dns1','0.0.0.0'");
				$config["dns1"] = "0.0.0.0";
			}
				
			if(!array_key_exists("dns2",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'dns2',''");
				$config["dns2"] = "0.0.0.0";
			}
				
			if(!array_key_exists("dnsupdate",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'dnsupdate','0'");
				$config["dnsupdate"] = 0;
			}
			
			if(!array_key_exists("maxlease",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'maxlease','86400'");
				$config["maxlease"] = "86400";
			}
				
			if(!array_key_exists("suglease",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'suglease','3600'");
				$config["suglease"] = "3600";
			}
				
			if(!array_key_exists("tftp",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'tftp',''");
				$config["tftp"] = "0.0.0.0";
			}
			
			if(!array_key_exists("pxe",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'pxe',''");
				$config["pxe"] = "0.0.0.0";
			}
			
			if(!array_key_exists("pxegw",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'pxegw',''");
				$config["pxegw"] = "0.0.0.0";
			}
			
			if(!array_key_exists("unkcli",$config)) {
				FS::$dbMgr->Insert("fss_dhcp_config","fss_dhcp_config.key,value","'unkcli','1'");
				$config["unkcli"] = 1;
			}

			return $config;
		}
		
		public function handlePostDatas($act) {
			switch($act) {
				case 1: 
					switch($this->UpdateGeneralSection()) {
						case 0: header("Location: index.php?mod=".$this->mid); break;
						case 1: header("Location: index.php?mod=".$this->mid."&err=1"); break;
						case 2: header("Location: index.php?mod=".$this->mid."&err=2"); break;
						case 3: header("Location: index.php?mod=".$this->mid."&err=3"); return;
						case 4: header("Location: index.php?mod=".$this->mid."&err=4"); return;
						case 5: header("Location: index.php?mod=".$this->mid."&err=5"); return;
						default: $this->HoneyPot();
					}
					return;
				case 2:
					$err = $this->CreateSubnet();
					if($err < 0)
						header("Location: index.php?mod=".$this->mid."&do=1&err=".$err);
					else
						header("Location: index.php?mod=".$this->mid."&do=2&net=".$err);							
					return;
				case 3:
					$err = $this->UpdateSubnet();
					if(is_array($err))
						header("Location: index.php?mod=".$this->mid."&do=2&err=".$err[1]."&net=".$err[0]);
					else
						header("Location: index.php?mod=".$this->mid."&do=2&net=".$err);
					return;
				case 4: $this->DeleteSubnet(); break;
				case 5: 
					$net = $this->CreateDistributedRange();
					if(is_array($net))
						header("Location: index.php?mod=".$this->mid."&do=5&err=".$net[1]."&net=".$net[0]);
					else
						header("Location: index.php?mod=".$this->mid."&do=2&net=".$net);
					return;
				case 6: 
					$net = $this->UpdateDistributedRange(); 
					if(is_array($net))
						header("Location: index.php?mod=".$this->mid."&do=6&err=".$net[1]."&net=".$net[0]."&rid=".$net[2]);
					else
						header("Location: index.php?mod=".$this->mid."&do=2&net=".$net);
					return;
				case 7:
					$netid = $this->DeleteDistributedRange();
					header("Location: index.php?mod=".$this->mid."&do=2&net=".$netid);
					return;
				case 8: // add reserv
					if(FS::isAJAXCall()) {
						$err = $this->addOrUpdateReserv(true);
						echo $err;
					}
					else {
						$netid = $this->addOrUpdateReserv();
						if(is_array($netid))
							header("Location: index.php?mod=".$this->mid."&do=7&err=".$netid[1]."&ip=".$netid[0]);
						else
							header("Location: index.php?mod=".$this->mid."&do=2&net=".$netid);
					}
					return;
				case 10: // delete reserv
					$netid = $this->deleteReserv();
					header("Location: index.php?mod=".$this->mid."&do=2&net=".$netid);
					return;
				case 11:
					$fid = $this->CreateFailover();
					if(is_array($fid))
						header("Location: index.php?mod=".$this->mid."&do=3&err=".$fid[1]);
					else
						header("Location: index.php?mod=".$this->mid."");
					return;
				case 12: // update failover
					$fid = $this->UpdateFailover();
					if(is_array($fid))
						header("Location: index.php?mod=".$this->mid."&do=4&err=".$fid[1]."&fid=".$fid[0]);
					else
						header("Location: index.php?mod=".$this->mid."");
					return;
				case 13: // delete failover
					$this->DeleteFailover();
					break;
				case 14: // apply configuration
					$this->writeConfig();
					break;
				default: $this->HoneyPot(); break;
			}
			header("Location: index.php?mod=".$this->mid);
		}
	};
?>
